üìå **–°–∫—Ä–∏–ø—Ç: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü –≤ Telegram**
function checkPaymentsAndNotify() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const botToken = "–í–ê–®_–¢–û–ö–ï–ù";
  const chatIds = ["241335883", "620271429"]; // –ø–æ–ª—É—á–∞—Ç–µ–ª–∏

  const SERVICE_HEADER = "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏";
  const DATE_HEADER = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è";
  const PAID_HEADER = "–û–ø–ª–∞—á–µ–Ω–æ";

  const serviceCol = headers.indexOf(SERVICE_HEADER);
  const dateCol = headers.indexOf(DATE_HEADER);
  const paidCol = headers.indexOf(PAID_HEADER);

  if (serviceCol === -1 || dateCol === -1 || paidCol === -1) {
    Logger.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏: '${SERVICE_HEADER}', '${DATE_HEADER}' –∏–ª–∏ '${PAID_HEADER}'`);
    return;
  }

  let message = "";

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const service = row[serviceCol];
    const paid = row[paidCol];
    const cellDate = sheet.getRange(i + 1, dateCol + 1).getValue();

    if (!cellDate || paid === true) continue;

    const endDate = new Date(cellDate);
    endDate.setHours(0, 0, 0, 0);

    const diffDays = Math.floor((endDate - today) / (1000 * 60 * 60 * 24));

    if ([0, 1, 3].includes(diffDays)) {
      const when =
        diffDays === 0 ? "—Å–µ–≥–æ–¥–Ω—è" :
        diffDays === 1 ? "–∑–∞–≤—Ç—Ä–∞" : "—á–µ—Ä–µ–∑ 3 –¥–Ω—è";

      const formatted = Utilities.formatDate(endDate, Session.getScriptTimeZone(), "dd.MM.yyyy");
      message += `üí∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: *${service}* ‚Äî –æ–ø–ª–∞—Ç–∞ ${when} (${formatted})\n`;
    }
  }

  if (message) {
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    chatIds.forEach(id => {
      const payload = {
        chat_id: id,
        text: message,
        parse_mode: "Markdown"
      };

      try {
        UrlFetchApp.fetch(url, {
          method: "post",
          contentType: "application/json",
          payload: JSON.stringify(payload)
        });
        Logger.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${id}`);
      } catch (error) {
        Logger.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${id}: ${error.message}`);
      }
    });

    Logger.log("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:");
    Logger.log(message);
  } else {
    Logger.log("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
  }
}
